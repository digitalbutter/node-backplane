{"majorversion": 0, "classmap": {"memoryMessageStore": {"name": "memoryMessageStore", "require": "utils.js", "namespace": "", "module": "utils", "guessedname": "my", "methods": {"addChannel": {"params": [{"type": "bus", "name": "bus:", "description": " bus on top of which to create the channel (string)"}, {"type": "channel", "name": "channel:", "description": " channel to create (string)"}]}, "addBus": {"params": [{"type": "bus", "name": "bus:", "description": " the bus to be created (string)"}]}, "getBusMessages": {"params": [{"type": "bus", "name": ":", "description": " bus from which to retrive messages"}, {"type": "options", "name": ":allows", "description": " to pass a \"since\" parameter, indicating the id of the last message retrieved before. Method will return new messages published since \"since\" (unless \"since\" is too old, in which case it will retrieve all messages in the queue)."}, {"type": "callback", "name": ":", "description": " callback method. Will be called as callback(message,error)"}], "description": "Retrieve messages from all the channel of a given bus"}, "delBus": {"params": [{"type": "bus", "name": ":", "description": " bus to be deleted\ndelete the bus\nthe bus MUST exist"}]}, "delChannel": {"params": [{"type": "bus", "name": ":", "description": " bus where the channel to be deleted lies"}, {"type": "channel", "name": ":", "description": " channel to remove\ndelete the channel\nthe channel MUST exist"}]}, "validate": {"params": [{"type": "message", "name": ":", "description": " message to be validated\ncheck that message is a proper Backplane message with source, type and payload"}]}, "save": {"return": {"type": "", "description": "null\nbus : must be a valid, existing bus\nchannel : if it does not exist, it will be created before pushing the message (MUST be base64 encoded)\ncontent : a valid backplane message"}, "params": [{"type": "bus", "name": ":", "description": " bus where the channel you want to post to lies"}, {"type": "channel", "name": ":", "description": " channel where to post the message"}, {"type": "content", "name": ":", "description": " message to post"}]}, "getChannelMessages": {"params": [{"type": "bus", "name": ":", "description": " bus where the channel lies"}, {"type": "channel", "name": ":", "description": " channel to retrieve the messages from"}, {"type": "options", "name": ":", "description": " allows to pass a \"since\" parameter, indicating the id of the last message retrieved before. Method will return new messages published since \"since\" (unless \"since\" is too old, in which case it will retrieve all messages in the queue)."}, {"type": "callback", "name": ":", "description": " callback method. Will be called as callback(message,error)"}], "description": "Retrieve messages from a given channel"}}, "file": "utils", "guessedtype": "property", "shortname": "memoryMessageStore", "description": "The memoryMessageStore class deals with:\n- storing the message in memory\n- validating messages\n- bus and channel management (creation, access)\n- providing messages (for bus and/or channel)\n- cleaning outdated messages"}, "TBind": {"name": "TBind", "namespace": "", "module": "utils", "guessedname": "TBind", "methods": {"bind": {"function": "bind", "return": {"type": "function", "description": "The function passed in bound to the local scope"}, "description": "A bind function which binds the scope of the funciton to be called to the local scope of the object.", "params": [{"type": "function", "name": "fn", "description": " The function to bind the local scope to"}], "guessedname": "bind", "guessedtype": "function"}}, "file": "Trait", "guessedtype": "function", "shortname": "TBind", "description": "A Trait class for holding helper functions for enforcing scope"}, "Store": {"file": "utils", "description": "Implements the Store. Deals with Bus and Channel construction/checking\nRetrieve information from Bus/Store", "namespace": "", "module": "utils", "private": "", "guessedname": "maxsize", "guessedtype": "property", "shortname": "Store", "name": "Store"}, "Channel": {"file": "utils", "description": "Implements a channel, take care of the queue of messages", "namespace": "", "module": "utils", "private": "", "guessedname": "maxsize", "guessedtype": "property", "shortname": "Channel", "name": "Channel"}}, "version": "0.0.0", "modules": {"utils": {"description": "A utility module used by this library", "submodules": [], "classlist": ["TBind", "Channel", "Store", "memoryMessageStore"], "filelist": ["utils.js", "BackplanePoller.js", "backplane.js", "backplaneMessages.js", "memoryMessageStore.js"], "subdata": {}, "name": "utils"}}, "filemap": {"BackplanePoller.js": {"name": "BackplanePoller.js", "classlist": [], "module": "utils", "guessedname": "events", "guessedtype": "property", "property": "events"}, "backplane.js": {"name": "backplane.js", "classlist": [], "module": "utils", "guessedname": "url", "guessedtype": "property", "property": "url"}, "utils.js": {"name": "utils.js", "classlist": [], "module": "utils", "guessedname": "Trait", "guessedtype": "property", "property": "Trait"}, "backplaneMessages.js": {"name": "backplaneMessages.js", "classlist": [], "module": "utils", "guessedname": "Message", "guessedtype": "function", "method": "Message"}, "memoryMessageStore.js": {"name": "memoryMessageStore.js", "classlist": [], "module": "utils", "guessedname": "utils", "guessedtype": "property", "property": "utils"}}}